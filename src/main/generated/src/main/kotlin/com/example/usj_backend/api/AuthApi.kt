/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.example.usj_backend.api

import com.example.usj_backend.model.AuthResponse
import com.example.usj_backend.model.LoginRequest
import com.example.usj_backend.model.UserRegistrationRequest
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface AuthApi {

    @Operation(
        tags = ["auth",],
        summary = "ログイン",
        operationId = "apiAuthLoginPost",
        description = """ユーザーログインを行います""",
        responses = [
            ApiResponse(responseCode = "200", description = "ログイン成功", content = [Content(schema = Schema(implementation = AuthResponse::class))]),
            ApiResponse(responseCode = "401", description = "認証失敗")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/auth/login"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun apiAuthLoginPost(@Parameter(description = "", required = true) @Valid @RequestBody loginRequest: LoginRequest): ResponseEntity<AuthResponse>

    @Operation(
        tags = ["auth",],
        summary = "ログアウト",
        operationId = "apiAuthLogoutPost",
        description = """ユーザーログアウトを行います""",
        responses = [
            ApiResponse(responseCode = "200", description = "ログアウト成功"),
            ApiResponse(responseCode = "401", description = "未認証")
        ],
        security = [ SecurityRequirement(name = "basicAuth"),SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/auth/logout"]
    )
    fun apiAuthLogoutPost(): ResponseEntity<Unit>

    @Operation(
        tags = ["auth",],
        summary = "ユーザー登録",
        operationId = "apiAuthRegisterPost",
        description = """新規ユーザーを登録します""",
        responses = [
            ApiResponse(responseCode = "201", description = "登録成功", content = [Content(schema = Schema(implementation = AuthResponse::class))]),
            ApiResponse(responseCode = "400", description = "入力エラー"),
            ApiResponse(responseCode = "409", description = "既に存在するユーザー")
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/auth/register"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun apiAuthRegisterPost(@Parameter(description = "", required = true) @Valid @RequestBody userRegistrationRequest: UserRegistrationRequest): ResponseEntity<AuthResponse>
}
