/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.example.usj_backend.api

import com.example.usj_backend.model.CreateDatePlanRequest
import com.example.usj_backend.model.DatePlan
import com.example.usj_backend.model.DatePlanDetail
import com.example.usj_backend.model.UpdateDatePlanRequest
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@RestController
@Validated
interface PlansApi {

    @Operation(
        tags = ["plans",],
        summary = "デートプラン一覧取得",
        operationId = "apiPlansGet",
        description = """作成したデートプランの一覧を取得します""",
        responses = [
            ApiResponse(responseCode = "200", description = "デートプラン一覧取得成功", content = [Content(array = ArraySchema(schema = Schema(implementation = DatePlan::class)))]),
            ApiResponse(responseCode = "401", description = "未認証")
        ],
        security = [ SecurityRequirement(name = "basicAuth"),SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/plans"],
            produces = ["application/json"]
    )
    fun apiPlansGet(): ResponseEntity<List<DatePlan>>

    @Operation(
        tags = ["plans",],
        summary = "デートプラン削除",
        operationId = "apiPlansPlanIdDelete",
        description = """指定したデートプランを削除します""",
        responses = [
            ApiResponse(responseCode = "204", description = "デートプラン削除成功"),
            ApiResponse(responseCode = "401", description = "未認証"),
            ApiResponse(responseCode = "403", description = "アクセス権限なし"),
            ApiResponse(responseCode = "404", description = "デートプランが見つかりません")
        ],
        security = [ SecurityRequirement(name = "basicAuth"),SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/api/plans/{planId}"]
    )
    fun apiPlansPlanIdDelete(@Parameter(description = "", required = true) @PathVariable("planId") planId: kotlin.Long): ResponseEntity<Unit>

    @Operation(
        tags = ["plans",],
        summary = "デートプラン詳細取得",
        operationId = "apiPlansPlanIdGet",
        description = """指定したデートプランの詳細を取得します""",
        responses = [
            ApiResponse(responseCode = "200", description = "デートプラン詳細取得成功", content = [Content(schema = Schema(implementation = DatePlanDetail::class))]),
            ApiResponse(responseCode = "401", description = "未認証"),
            ApiResponse(responseCode = "403", description = "アクセス権限なし"),
            ApiResponse(responseCode = "404", description = "デートプランが見つかりません")
        ],
        security = [ SecurityRequirement(name = "basicAuth"),SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/api/plans/{planId}"],
            produces = ["application/json"]
    )
    fun apiPlansPlanIdGet(@Parameter(description = "", required = true) @PathVariable("planId") planId: kotlin.Long): ResponseEntity<DatePlanDetail>

    @Operation(
        tags = ["plans",],
        summary = "デートプラン更新",
        operationId = "apiPlansPlanIdPut",
        description = """指定したデートプランを更新します""",
        responses = [
            ApiResponse(responseCode = "200", description = "デートプラン更新成功", content = [Content(schema = Schema(implementation = DatePlan::class))]),
            ApiResponse(responseCode = "400", description = "入力エラー"),
            ApiResponse(responseCode = "401", description = "未認証"),
            ApiResponse(responseCode = "403", description = "アクセス権限なし"),
            ApiResponse(responseCode = "404", description = "デートプランが見つかりません")
        ],
        security = [ SecurityRequirement(name = "basicAuth"),SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/api/plans/{planId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun apiPlansPlanIdPut(@Parameter(description = "", required = true) @PathVariable("planId") planId: kotlin.Long,@Parameter(description = "", required = true) @Valid @RequestBody updateDatePlanRequest: UpdateDatePlanRequest): ResponseEntity<DatePlan>

    @Operation(
        tags = ["plans",],
        summary = "デートプラン作成",
        operationId = "apiPlansPost",
        description = """新しいデートプランを作成します""",
        responses = [
            ApiResponse(responseCode = "201", description = "デートプラン作成成功", content = [Content(schema = Schema(implementation = DatePlan::class))]),
            ApiResponse(responseCode = "400", description = "入力エラー"),
            ApiResponse(responseCode = "401", description = "未認証")
        ],
        security = [ SecurityRequirement(name = "basicAuth"),SecurityRequirement(name = "bearerAuth") ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/api/plans"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun apiPlansPost(@Parameter(description = "", required = true) @Valid @RequestBody createDatePlanRequest: CreateDatePlanRequest): ResponseEntity<DatePlan>
}
